#version 460
// We aren't using any of these, but just in case we want to later...
//#extension GL_ARB_separate_shader_objects : enable
//#extension GL_ARB_gpu_shader_int64 : enable
//#extension GL_EXT_debug_printf : enable
//#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int8 : enable
//#extension GL_EXT_shader_explicit_arithmetic_types_int16 : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : enable
//#extension GL_EXT_shader_atomic_int64: enable

// compile this file into SPIR-V with:
//   glslangValidator --target-env vulkan1.3 -V sq.comp
// or
//   glslc --target-env=vulkan1.3 sq.comp -o comp.spv
// glslc might produce slightly faster SPIR-V for the Radeon VII

// number of squares.
#define N (1024*48)
#define NP 1000000
#define NPr 1000
#define NBits 128  // must be a power of 2

layout (local_size_x = 64) in;

layout(binding = 0) buffer buf
{
	int    Init;
	int    Err;
	int    Found;
	int    Limit;        // once we get here, attempt to further mods
	uint   Seed;
	int    Scores[N];    // last score for each square
	uint   Out[N][36];
	int    BOI;
};


// This is allocated in DEVICE_LOCAL memory, not shared with host.  See CPU code to see how this is allocated.
// This is much faster to access from the shader, especially if the GPU is in a PCIx1 slot.
layout(binding = 1) buffer buf2
{
	uint     PrimesB[NP/32];
	uint     Square[N][36];
	// hashtable estimator thing...
	uint    Bits[N][NBits];
	int     Count[N];
};
// 183 333199383293922751136131794399397433 
// 181 337199947933196613715712398399994133
// 178 912839199679761139335932317743311933
// 177 929389337313994199763901925717167339
// 177 339839327194931697157149197333933199
// 176 931193933893417517770691929349313933
// 175 978779199583934721491731337699975133
// 174 313373713873641929779514919631339173
const int test[36] = 
{
	3,3,3,7,1,3,
        9,3,6,5,9,9,
        5,4,1,8,1,1,
        3,7,3,6,3,1,
        9,9,1,9,4,3,
        3,3,2,9,9,9,
};
const int maxdigits[36][8] =
{
	{5, 0, 5, 0, 5, 0, 0, 0},
	{4, 1, 5, 0, 4, 0, 1, 0},
	{3, 2, 5, 0, 3, 0, 2, 0},
	{2, 3, 5, 0, 2, 0, 3, 0},
	{1, 4, 5, 0, 1, 0, 4, 0},
	{0, 5, 5, 0, 0, 0, 5, 0},
	{5, 0, 4, 1, 4, 0, 0, 1},
	{4, 1, 4, 1, 4, 1, 1, 1},
	{3, 2, 4, 1, 3, 1, 2, 1},
	{2, 3, 4, 1, 2, 1, 3, 1},
	{1, 4, 4, 1, 1, 1, 4, 1},
	{0, 5, 4, 1, 0, 1, 4, 0},
	{5, 0, 3, 2, 3, 0, 0, 2},
	{4, 1, 3, 2, 3, 1, 1, 2},
	{3, 2, 3, 2, 3, 2, 2, 2},
	{2, 3, 3, 2, 2, 2, 3, 2},
	{1, 4, 3, 2, 1, 2, 3, 1},
	{0, 5, 3, 2, 0, 2, 3, 0},
	{5, 0, 2, 3, 2, 0, 0, 3},
	{4, 1, 2, 3, 2, 1, 1, 3},
	{3, 2, 2, 3, 2, 2, 2, 3},
	{2, 3, 2, 3, 2, 3, 2, 2},
	{1, 4, 2, 3, 1, 3, 2, 1},
	{0, 5, 2, 3, 0, 3, 2, 0},
	{5, 0, 1, 4, 1, 0, 0, 4},
	{4, 1, 1, 4, 1, 1, 1, 4},
	{3, 2, 1, 4, 1, 2, 1, 3},
	{2, 3, 1, 4, 1, 3, 1, 2},
	{1, 4, 1, 4, 1, 4, 1, 1},
	{0, 5, 1, 4, 0, 4, 1, 0},
	{5, 0, 0, 5, 0, 0, 0, 5},
	{4, 1, 0, 5, 0, 1, 0, 4},
	{3, 2, 0, 5, 0, 2, 0, 3},
	{2, 3, 0, 5, 0, 3, 0, 2},
	{1, 4, 0, 5, 0, 4, 0, 1},
	{0, 5, 0, 5, 0, 5, 0, 0},
};

const uint dist[36][10] = 
{
 {1,  4,  6, 55, 57, 59, 61, 63, 65, 100},
 {1, 10, 12, 61, 63, 63, 65, 69, 72, 100},
 {1, 32, 35, 49, 55, 57, 61, 79, 81, 100},
 {1, 32, 35, 49, 53, 54, 57, 77, 80, 100},
 {1, 13, 14, 50, 51, 52, 52, 58, 59, 100},
 {1, 12, 13, 58, 59, 60, 61, 69, 70, 100},
 {1, 12, 13, 58, 59, 60, 61, 69, 70, 100},
 {1, 12, 23, 40, 49, 58, 66, 80, 86, 100},
 {1, 12, 23, 40, 49, 58, 66, 80, 86, 100},
 {1, 19, 29, 40, 47, 58, 65, 80, 83, 100},
 {1, 11, 12, 59, 60, 60, 61, 67, 68, 100},
 {1, 11, 12, 59, 60, 60, 61, 67, 68, 100},
 {1, 30, 34, 52, 57, 58, 62, 80, 83, 100},
 {1, 17, 29, 46, 53, 59, 65, 79, 86, 100},
 {1, 13, 19, 25, 45, 54, 65, 92, 94, 100},
 {1, 14, 21, 39, 47, 59, 65, 80, 84, 100},
 {1, 14, 21, 39, 47, 59, 65, 80, 84, 100},
 {1, 33, 35, 48, 53, 54, 56, 74, 78, 100},
 {1, 36, 41, 55, 59, 60, 62, 80, 83, 100},
 {1, 14, 26, 41, 50, 58, 65, 77, 83, 100},
 {1,  7, 15, 22, 33, 44, 62, 92, 94, 100},
 {1, 12, 21, 37, 47, 55, 64, 81, 86, 100},
 {1, 12, 21, 37, 47, 55, 64, 81, 86, 100},
 {1, 43, 46, 58, 63, 65, 67, 84, 87, 100},
 {1,  8,  9, 50, 51, 52, 53, 60, 61, 100},
 {1, 16, 26, 43, 53, 63, 70, 84, 90, 100},
 {1, 16, 26, 43, 53, 63, 70, 84, 90, 100},
 {1, 16, 26, 41, 52, 57, 66, 81, 85, 100},
 {1,  7,  9, 36, 38, 40, 42, 47, 50, 100},
 {1, 11, 12, 50, 51, 52, 53, 57, 58, 100},
 {1, 14, 15, 54, 55, 56, 57, 63, 64, 100},
 {1, 14, 15, 54, 55, 56, 57, 63, 64, 100},
 {1, 34, 38, 52, 57, 58, 61, 79, 82, 100},
 {1, 30, 32, 52, 56, 57, 59, 76, 80, 100},
 {1, 11, 12, 60, 60, 60, 61, 67, 68, 100},
 {1,  3,  4, 53, 54, 55, 56, 57, 58, 100},
};

const int offsets[8] = { 1, -1, 6, -6, 7, -7, 5, -5};

void reset(uint n) {
	Count[n] = 0;
	for (int i = 0; i < NBits; i++) {
		Bits[n][i] = 0;
	}
}

// murmur style hash
uint64_t cks(uint64_t h) {
	h ^= h >> 33;
	h *= 0xff51afd7ed558ccdul;
	h ^= h >> 33;
	h *= 0xc4ceb9fe1a85ec53ul;
	h ^= h >> 33;
	return h;
}
bool pb(uint n) {
	uint b = 1u << (n%32);
	uint o = n / 32;
	return (PrimesB[o] & b) != 0;
}

// test if n is prime, if so add to counting hash
void add(uint I, uint n) {
	if (!pb(n)) {
		return;
	}
	uint64_t h64 = cks(uint64_t(n));

	h64 >>= 1;
	uint h = uint(h64 & 31);
	uint bit = h;

	// index can not in anyway corelate to bit.
	h64 >>= 9;
	h = uint(h64 & (NBits-1));
	uint index = h;

	uint mask = 1u << bit;

	if ((Bits[I][index] & mask) == 0) {
		Count[I] += 1;
		Bits[I][index] |= mask;
	}
}

// calculate an estimate of how many objects we hashed.
int estimate(uint I) {
	//return Count[I];
	double c = float(Count[I]);
	double m = float(NBits * 32);
	double est = m * log(float((m) / (m-c)));
	return int(est);
}

// hash a sequence to produce random numbers
uint rand() {
	uint r = atomicAdd(Seed, 1);
	return uint(cks(uint64_t(r) >> 1));
}
uint randdig(uint cell) {
	uint n = rand();
	if ((n & 63) == 0) {
		n = rand() % 10;
		return n;
	}
	n = rand() % 100;
	for (uint j = 0; j < 10; j++) {
		if (n < dist[cell][j]) {
			return j;
		}
	}
}
void init2(uint I) {
	if ((rand() & 1) == 0) {
	       	return;
	}
	for (int i = 0; i < 36; i++) {
		Square[I][i] = Out[BOI][i];
	}
}
void init3(uint I) {
	for (int i = 0; i < 36; i++) {
		//Square[I][i] = rand() % 10;
		Square[I][i] = randdig(i);
	}
}

// called once to set things up
void init(uint I) {
		
	for (int i = 0; i < 36; i++) {
		//Square[I][i] = 1;
		Square[I][i] = randdig(i);
		//Square[I][i] = test[i];
	}
	reset(I);
 
	if (I == 0) {
		for (int i = 0; i < NP/32; i ++) {
			PrimesB[i] = 0;
		}
		
		for (int i = 3; i < NP; i += 2) {
			PrimesB[i/32] |= 1u << (i%32);
		}
		for (uint i = 3; i < NPr; i += 2) {
			if (pb(i)) {
				for (uint j = i*i; j < NP; j += i) {
					PrimesB[j/32] &= ~(1u << (j%32));
				}
			}
		}
		PrimesB[0] |= 1u << 2;
	}
}

int count4(uint I) {
	reset(I);

	uint e[60];
	for (int i = 0; i < 60; i++) {
		e[i] = 0;
	}
	/* slight speed up, skip and we may estimate a couple low 
	for (int cell = 0; cell < 36; cell++) {
		uint d = Square[I][cell];
	       	add(I, d);
	} */
	for (int j = 0; j < 6; j++) {
		for (int i = 0; i < 6; i++) {
			// across
			e[j] = e[j] * 10 + Square[I][i + j * 6];
			// down
			e[j+6] = e[j+6] * 10 + Square[I][i*6 + j];
			// left
			e[j+12] = e[j+12] * 10 + Square[I][(5-i) + j * 6];
			// up
			e[j+18] = e[j+18] * 10 + Square[I][(5-i)*6 + j];
		}
		e[24] = e[24]*10 + Square[I][j*7];
		e[25] = e[25]*10 + Square[I][(5-j)*7];
		e[26] = e[26]*10 + Square[I][5+j*5];
		e[27] = e[27]*10 + Square[I][30-j*5];
	}
	e[28] = Square[I][6] * 10 + Square[I][1];
	e[29] = Square[I][1] * 10 + Square[I][6];
	e[30] = Square[I][34] * 10 + Square[I][29];
	e[31] = Square[I][29] * 10 + Square[I][34];

	e[32] = Square[I][12] * 100 + Square[I][7] * 10 + Square[I][2];
	e[33] = Square[I][2] * 100 + Square[I][7] * 10 + Square[I][12];
	e[34] = Square[I][33] * 100 + Square[I][28] * 10 + Square[I][23];
	e[35] = Square[I][23] * 100 + Square[I][28] * 10 + Square[I][33];

	e[36] = Square[I][18] * 1000 + Square[I][13] * 100 + Square[I][8] * 10 + Square[I][3];
	e[37] = Square[I][3] * 1000 + Square[I][8] * 100 + Square[I][13] * 10 + Square[I][18];
	e[38] = Square[I][32] * 1000 + Square[I][27] * 100 + Square[I][22] * 10 + Square[I][17];
	e[39] = Square[I][17] * 1000 + Square[I][22] * 100 + Square[I][27] * 10 + Square[I][32];

	e[40] = Square[I][24] * 10000 + Square[I][19] * 1000 + Square[I][14] * 100 + Square[I][9] * 10 + Square[I][4];
	e[41] = Square[I][4] * 10000 + Square[I][9] * 1000 + Square[I][14] * 100 + Square[I][19] * 10 + Square[I][24];
	e[42] = Square[I][11] * 10000 + Square[I][16] * 1000 + Square[I][21] * 100 + Square[I][26] * 10 + Square[I][31];
	e[43] = Square[I][31] * 10000 + Square[I][26] * 1000 + Square[I][21] * 100 + Square[I][16] * 10 + Square[I][11];

	e[44] = Square[I][4] * 10 + Square[I][11];
	e[45] = Square[I][11] * 10 + Square[I][4];
	e[46] = Square[I][24] * 10 + Square[I][31];
	e[47] = Square[I][31] * 10 + Square[I][24];
	
	e[48] = Square[I][3] * 100 + Square[I][10] * 10 + Square[I][17];
	e[49] = Square[I][17] * 100 + Square[I][10] * 10 + Square[I][3];
	e[50] = Square[I][18] * 100 + Square[I][25] * 10 + Square[I][32];
	e[51] = Square[I][32] * 100 + Square[I][25] * 10 + Square[I][18];

	
	e[52] = Square[I][2] * 1000 + Square[I][9] * 100 + Square[I][16] * 10 + Square[I][23];
	e[53] = Square[I][23] * 1000 + Square[I][16] * 100 + Square[I][9] * 10 + Square[I][3];
	e[54] = Square[I][12] * 1000 + Square[I][19] * 100 + Square[I][26] * 10 + Square[I][33];
	e[55] = Square[I][33] * 1000 + Square[I][26] * 100 + Square[I][19] * 10 + Square[I][12];

	e[56] = Square[I][1] * 10000 + Square[I][8] * 1000 + Square[I][15] * 100 + Square[I][22] * 10 + Square[I][29];
	e[57] = Square[I][29] * 10000 + Square[I][22] * 1000 + Square[I][15] * 100 + Square[I][8] * 10 + Square[I][1];
	e[58] = Square[I][6] * 10000 + Square[I][13] * 1000 + Square[I][20] * 100 + Square[I][27] * 10 + Square[I][34];
	e[59] = Square[I][34] * 10000 + Square[I][27] * 1000 + Square[I][20] * 100 + Square[I][13] * 10 + Square[I][6];
	for (int i = 0; i < 60; i++) {
		uint n = e[i];
		add(I, n);
		// five
		add(I, n/10);       // 12345
		add(I, n % 100000); // 23456
		// four
		add(I, n/100);      // 1234
		add(I, n%10000);    // 3456
		add(I, (n/10)%10000); // 2345
		// three
		add(I, n/1000); // 123
		add(I, n%1000); // 456
		add(I, (n/10)%1000); // 345
		add(I, (n/100)%1000); // 234
		// two
		add(I, n/10000);    // 12
		add(I, n%100);      // 56
		add(I, (n/10)%100); // 45
		add(I, (n/100)%100); // 34
		add(I, (n/1000)%100); // 23

	}
	return estimate(I);
}


int count(uint I) {
	reset(I);
	for (int cell = 0; cell < 36; cell++) {
		uint d = Square[I][cell];
		add(I, d);
		// this is really slow, need to do this differently
		for (int dir = 0; dir < 8; dir++) {
			int l = maxdigits[cell][dir];
			if (l > 0) {
				int o = cell;
				uint num = Square[I][o];
				while (l > 0) {
					o += offsets[dir];
					num = num * 10 + Square[I][o];
					add(I, num);
					l--;
				}
			}
		}
	}
	int e = estimate(I);
	return e;
}

//
// a different way of making a random squence.
//
uint
    x=123456789,
    y=362436069,
    z=521288629,
    w=88675123,
    v=886756453;
/* replace defaults with five random seed values in calling program */

uint xorshift(void)
{
    uint t = x^(x>>7);
    x=y; y=z; z=w; w=v;
    v=(v^(v<<6))^(t^(t<<13)); 
    return (y+y+1)*v;
} 

void seed(uint r)
{
	x = r;
	v = xorshift();
	w = xorshift();
	z = xorshift();
	y = xorshift();
}

void main() {
	uint I = gl_GlobalInvocationID.x;
	if (I >= N) {
		return;
	}
	if (Init != 0) {
		if (Init == 1) {
			init(I);
		}
		if (Init == 2) {
			init2(I);
		}
		if (Init == 3) {
			init3(I);
		}
		return;
	}

//	seed(Seed + uint(cks(uint64_t(I))>>1));

	uint r = rand();
	uint cell = r % 36;

	Square[I][cell] = randdig(cell);
	
	int e = count4(I);
	// if it scores better than the lower limit, report it back to the caller.
	if (e > Limit) {
		int o = atomicAdd(Found, 1);
		Scores[o] = e;
		for (int i = 0; i < 36; i++) {
			Out[o][i] = Square[I][i];
		}
	}
}
